for (k in 1:5) #nrow(ratings_matrix))
{
if (i != k)
{
#co_rated_list <- which(((ratings_matrix[i,] != 0) & (ratings_matrix[k,] != 0)) == TRUE)
#if(length(co_rated_list)>5) {
#	ui <- ratings_matrix[i,co_rated_list]
#	uk <- ratings_matrix[k,co_rated_list]
#	cosine_similarity_matrix[i,k] <- cosine(ui,uk)
#}
#else {
#		cosine_similarity_matrix[i,k] <- NaN
#}
}
else
{
cosine_similarity_matrix[i,k] <- 1
}
}
}
dim(cosine_similarity_matrix)
head(cosine_similarity_matrix)
cosine_similarity_matrix[1,2]
cosine_similarity_matrix[1,1]
cosine
#user-user cosine similarity matrix
ratings_matrix <- ratings
cosine_similarity_matrix  <- matrix(data = NA, nrow = nrow(ratings_matrix),ncol = nrow(ratings_matrix))
for (i in 1:5) { #(ratings_matrix))
for (k in 1:5) #nrow(ratings_matrix))
{
if (i != k)
{
co_rated_list <- which(((ratings_matrix[i,] != 0) & (ratings_matrix[k,] != 0)) == TRUE)
print(co_ated_list)
#if(length(co_rated_list)>5) {
#	ui <- ratings_matrix[i,co_rated_list] -
#	uk <- ratings_matrix[k,co_rated_list] -
#	cosine_similarity_matrix[i,k] <- cosine(ui,uk)
#}
#else {
#		cosine_similarity_matrix[i,k] <- Na
#}
}
else
{
cosine_similarity_matrix[i,k] <- 1
}
}
}
source("user_user_cosine_similarity.r")
source("R/user_user_cosine_similarity.r")
source("R/user_user_cosine_similarity.r")
source("R/user_user_cosine_similarity.r")
source("R/user_user_cosine_similarity.r")
source("R/user_user_cosine_similarity.r")
ratings_matrix <- ratings
small_matrix <- numeric()
for(i in 1:nrow(ratings_matrix)) {
scores <- ratings_matrix[i,]
number_rated_items <- sum(!is.na(scores))
if(number_rated_items>5) {
rbind(small_matrix, ratings_matrix[i,])
}
}
ratings_matrix <- ratings
small_matrix <- numeric()
count <- 0
for(i in 1:nrow(ratings_matrix)) {
scores <- ratings_matrix[i,]
number_rated_items <- sum(!is.na(scores))
if(number_rated_items > 5) {
count <- count + 1
rbind(small_matrix, ratings_matrix[i,])
}
}
ratings_matrix <- ratings
small_matrix <- numeric()
for(i in 1:nrow(ratings_matrix)) {
scores <- ratings_matrix[i,]
number_rated_items <- sum(!is.na(scores))
if(number_rated_items > 5) {
small_matrix <- rbind(small_matrix, ratings_matrix[i,])
}
}
dim(small_mtrix)
dim(small_matrix)
names(small_matrix)
small_matrix[1,2]
small_matrix <- numeric()
user_names <- vector()
for(i in 1:nrow(ratings_matrix)) {
scores <- ratings_matrix[i,]
number_rated_items <- sum(!is.na(scores))
if(number_rated_items>5) {
temp <- ratings_matrix[i,]
user_names <- rbind(user_names, row.names(temp))
small_matrix <- rbind(small_matrix, temp)
}
}
user_names[1]
small_matrix <- numeric()
user_names <- vector()
for(i in 1:nrow(ratings_matrix)) {
scores <- ratings_matrix[i,]
number_rated_items <- sum(!is.na(scores))
if(number_rated_items>5) {
temp <- ratings_matrix[i,]
user_names <- rbind(user_names, row.names(ratings_matrix[i,]))
small_matrix <- rbind(small_matrix, temp)
}
}
user_names[1]
small_matrix <- numeric()
user_names <- vector()
for(i in 1:nrow(ratings_matrix)) {
scores <- ratings_matrix[i,]
number_rated_items <- sum(!is.na(scores))
if(number_rated_items>5) {
temp <- ratings_matrix[i,]
#user_names <- rbind(user_names,
print(row.names(ratings_matrix[i,]))
small_matrix <- rbind(small_matrix, temp)
}
}
row.names(ratings_matrix)
row.names(ratings_matrix[1,1])
print(row.names(ratings_matrix[1,1])0
print(row.names(ratings_matrix[1,1])
)
print(row.names(ratings_matrix[1]))
row.names(ratings_matrix)
row.names(ratings_matrix[1,])
name <- row.names(ratings_matrix[1,])
small_matrix <- numeric()
user_names <- vector()
for(i in 1:nrow(ratings_matrix)) {
scores <- ratings_matrix[i,]
number_rated_items <- sum(!is.na(scores))
if(number_rated_items>5) {
temp <- ratings_matrix[i,]
user_names <- rbind(user_names, row.names(ratings_matrix)[i,])
small_matrix <- rbind(small_matrix, temp)
}
}
small_matrix <- numeric()
user_names <- vector()
for(i in 1:nrow(ratings_matrix)) {
scores <- ratings_matrix[i,]
number_rated_items <- sum(!is.na(scores))
if(number_rated_items>5) {
temp <- ratings_matrix[i,]
user_names <- rbind(user_names, row.names(ratings_matrix)[i])
small_matrix <- rbind(small_matrix, temp)
}
}
dim(small_matrix)
row.names(small_matrix)
user_names
small_matrix <- numeric()
user_names <- vector()
for(i in 1:nrow(ratings_matrix)) {
scores <- ratings_matrix[i,]
number_rated_items <- sum(!is.na(scores))
if(number_rated_items>5) {
temp <- ratings_matrix[i,]
user_names <- rbind(user_names, row.names(ratings_matrix)[i])
small_matrix <- rbind(small_matrix, temp)
}
}
row.names(small_matrix) <- user_names
ro_names(small_matrix)
row.names(small_matrix)
source("R/user_user_cosine_similarity.r")
names(users_baseline)
users_bseline[kitty66]
users_bseline["kitty66"]
users_baseline["kitty66"]
source("R/user_user_cosine_similarity.r")
source("R/user_user_cosine_similarity.r")
source("R/user_user_cosine_similarity.r")
source("R/user_user_cosine_similarity.r")
dim(cosine_similarity_matrix)
cosine_similarity_matrix[1,1]
cosine_similarity_matrix[1,2]
cosine_similarity_matrix[1,3]
sum(!is.na(cosine_similarity_matrix))
source("R/user_user_cosine_similarity.r")
source("R/user_user_cosine_similarity.r")
source("R/user_user_cosine_similarity.r")
source("R/user_user_cosine_similarity.r")
source("R/user_user_cosine_similarity.r")
rm(co_rated_list)
source("R/user_user_cosine_similarity.r")
source("R/user_user_cosine_similarity.r")
source("R/user_user_cosine_similarity.r")
source("R/user_user_cosine_similarity.r")
source("R/user_user_cosine_similarity.r")
source("R/user_user_cosine_similarity.r")
source("R/user_user_cosine_similarity.r")
for (i in 1:nrow(small_matrix)) {
for (k in 1:nrow(small_matrix))
{
if (i != k){
co_rated_list <- which(complete.cases( small_matrix[i,], small_matrix[k,] ))
if(length(co_rated_list)>5) {
ui <- small_matrix[i,co_rated_list] - users_baseline[row.names(small_matrix)[i]]
print(ui)
uk <- small_matrix[k,co_rated_list] - users_baseline[row.names(small_matrix)[k]]
cosine_similarity_matrix[i,k] <- cosine(ui,uk)
}
else {
cosine_similarity_matrix[i,k] <- NaN
}
}
else {
cosine_similarity_matrix[i,k] <- 1
}
}
}
source("R/user_user_cosine_similarity.r")
dim(cosine_similarity_matrix)
!is.na(cosine_similarity_matrix)
sum(!is.na(cosine_similarity_matrix))
cosine_similarity_matrix[1,2]
head(cosine_similarity_matrix)
names(cosine_similarity_matrix)
names(cosine_similarity_matrix)<-names(small_matrix)
names(cosine_similarity_matrix)
names(small_mrix)
names(small_matrix)
row.names(small_matrix)
row.names(cosine_similarity_matrix) <- row.names(small_matrix)
names(small_matrix)
row.names(cosine_similarity_matrix)
col.names(cosine_similarity_matrix)<-row.names(small_matrix)
cols.names(cosine_similarity_matrix)<-row.names(small_matrix)
colnames(cosine_similarity_matrix)<-row.names(small_matrix)
names(cosine_similarity_matrix)
colnames(cosine_similarity_matrix)
names(cosine_similarity_matrix[1,2])
colnames(cosine_similarity_matrix[1,2])
col.names(cosine_similarity_matrix[1,2])
row.names(cosine_similarity_matrix[1,2])
rownames(cosine_similarity_matrix)
colnames(cosine_similarity_matrix)
head(cosine_similarity_matrix)
for(i in 1:nrow(ratings) {
if(rownames(ratings)[i] in rownames(cosine_similarity_matrix) {
print("im here")
}
}
for(i in 1:nrow(ratings) {
if(rownames(ratings)[i] in rownames(cosine_similarity_matrix)) {
print("im here")
}
}
for(i in 1:nrow(ratings) {
if(rownames(ratings)[i] in rownames(cosine_similarity_matrix)) {
print("im here")
}
}
for(i in 1:nrow(ratings) {
if(rownames(ratings)[i] in rownames(cosine_similarity_matrix)) {
print("im here")
}
}
for(i in 1:nrow(ratings)) {
if(rownames(ratings)[i] in rownames(cosine_similarity_matrix)) {
print("im here")
}
}
for(i in 1:nrow(ratings)) {
if(rownames(ratings)[i] in rownames(cosine_similarity_matrix)) {
print("im here")
}
}
for(i in 1:nrow(ratings)) {
if(is.element(rownames(ratings)[i], rownames(cosine_similarity_matrix)) {
print("im here")
}
}
for(i in 1:nrow(ratings)) {
if(is.element(rownames(ratings)[i], rownames(cosine_similarity_matrix)) {
print("im here")
}
}
for(i in 1:nrow(ratings)) {
if(is.element(rownames(ratings)[i], rownames(cosine_similarity_matrix)) ){
print("im here")
}
}
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings, ncol=10)
for(i in 1:nrow(ratings)) {
if(is.element(rownames(ratings)[i], rownames(cosine_similarity_matrix)) ){
nearest_neighbours[i,] <- head(sort(cosine_similarity_matrixt, decreasing=TRUE), 10)
}
}
# computing k-NN for K = 20
#crate matrix to hold 20 nearest neighbours for each user if have them
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings, ncol=10)
for(i in 1:nrow(ratings)) {
if(is.element(rownames(ratings)[i], rownames(cosine_similarity_matrix)) ){
nearest_neighbours[i,] <- head(sort(cosine_similarity_matrixt, decreasing=TRUE), 10)
}
}
# computing k-NN for K = 20
#crate matrix to hold 20 nearest neighbours for each user if have them
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings, ncol=10))
for(i in 1:nrow(ratings)) {
if(is.element(rownames(ratings)[i], rownames(cosine_similarity_matrix)) ){
nearest_neighbours[i,] <- head(sort(cosine_similarity_matrixt, decreasing=TRUE), 10)
}
}
View(cosine_similarity_matrix)
# computing k-NN for K = 20
#crate matrix to hold 20 nearest neighbours for each user if have them
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings, ncol=10))
for(i in 1:nrow(ratings)) {
if(is.element(rownames(ratings)[i], rownames(cosine_similarity_matrix)) ){
nearest_neighbours[i,] <- head(sort(cosine_similarity_matrix, decreasing=TRUE), 10)
}
}
# computing k-NN for K = 20
#crate matrix to hold 20 nearest neighbours for each user if have them
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings, ncol=10))
for(i in 1:nrow(ratings)) {
if(is.element(rownames(ratings)[i], rownames(cosine_similarity_matrix)) ){
nearest_neighbours[i,] <- head(sort(cosine_similarity_matrix, decreasing=TRUE), 10)
}
}
# computing k-NN for K = 20
#crate matrix to hold 20 nearest neighbours for each user if have them
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings), ncol=10)
for(i in 1:nrow(ratings)) {
if(is.element(rownames(ratings)[i], rownames(cosine_similarity_matrix)) ){
nearest_neighbours[i,] <- head(sort(cosine_similarity_matrix, decreasing=TRUE), 10)
}
}
head(nearest_neighbous)
head(nearest_neighbours)
good<-!is.na(nearest_neighbours)
nearest_neighbours(good)
nearest_neighbours[good]
# computing k-NN for K = 20
#crate matrix to hold 20 nearest neighbours for each user if have them
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings), ncol=10)
for(i in 1:nrow(ratings)) {
if(is.element(rownames(ratings)[i], rownames(cosine_similarity_matrix)) ){
nearest_neighbours[i,] <- head(sort(cosine_similarity_matrix[i,], decreasing=TRUE), 10)
}
}
# computing k-NN for K = 20
#crate matrix to hold 20 nearest neighbours for each user if have them
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings), ncol=10)
for(i in 1:nrow(ratings)) {
if(is.element(rownames(ratings)[i], rownames(cosine_similarity_matrix)) ){
nearest_neighbours[i,] <- head(sort(cosine_similarity_matrix[i], decreasing=TRUE), 10)
}
}
cosine_similarity_matrix[1,]
# computing k-NN for K = 20
#crate matrix to hold 20 nearest neighbours for each user if have them
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings), ncol=10)
for(i in 1:nrow(ratings)) {
if(is.element(rownames(ratings)[i], rownames(cosine_similarity_matrix)) ){
nearest_neighbours[i,] <- head(sort(cosine_similarity_matrix[i,], decreasing=TRUE), 10)
}
}
# computing k-NN for K = 20
#crate matrix to hold 20 nearest neighbours for each user if have them
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings), ncol=10)
for(i in 1:nrow(ratings)) {
if(is.element(rownames(ratings)[i], rownames(cosine_similarity_matrix)) ){
nearest_neighbours[i,] <- nearest_neighbours[i,] + head(sort(cosine_similarity_matrix[i,], decreasing=TRUE), 10)
}
}
# computing k-NN for K = 20
#crate matrix to hold 20 nearest neighbours for each user if have them
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings), ncol=10)
for(i in 1:nrow(ratings)) {
if(is.element(rownames(ratings)[i], rownames(cosine_similarity_matrix)) ){
lista <- head(sort(cosine_similarity_matrix[i,], decreasing=TRUE), 10)
}
}
# computing k-NN for K = 20
#crate matrix to hold 20 nearest neighbours for each user if have them
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings), ncol=10)
for(i in 1:nrow(ratings)) {
if(is.element(rownames(ratings)[i], rownames(cosine_similarity_matrix)) ){
lista <- head(sort(cosine_similarity_matrix[row.names(ratings)[i],], decreasing=TRUE), 10)
}
}
head(lista)
lista
# computing k-NN for K = 20
#crate matrix to hold 20 nearest neighbours for each user if have them
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings), ncol=10)
for(i in 1:nrow(ratings)) {
if(is.element(rownames(ratings)[i], rownames(cosine_similarity_matrix)) ){
temp <- cosine_similarity_matrix[row.names(ratings)[i],]
nearest_neighbours <- head(sort(temp, decreasing=TRUE, 10))
}
}
neirest_neighbours
nearest_neighbours
# computing k-NN for K = 20
#crate matrix to hold 20 nearest neighbours for each user if have them
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings), ncol=10)
for(i in 1:nrow(ratings)) {
print(rownames(rtings)[i])
#if(rownames(ratings)[i], rownames(cosine_similarity_matrix)) ){
#temp <- cosine_similarity_matrix[row.names(ratings)[i],]
#nearest_neighbours <- head(sort(temp, decreasing=TRUE, 10))
}
}
# computing k-NN for K = 20
#crate matrix to hold 20 nearest neighbours for each user if have them
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings), ncol=10)
for(i in 1:nrow(ratings)) {
print(rownames(ratings)[i])
#if(rownames(ratings)[i], rownames(cosine_similarity_matrix)) ){
#temp <- cosine_similarity_matrix[row.names(ratings)[i],]
#nearest_neighbours <- head(sort(temp, decreasing=TRUE, 10))
#}
}
-++
)
# computing k-NN for K = 20
#crate matrix to hold 20 nearest neighbours for each user if have them
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings), ncol=10)
for(i in 1:nrow(ratings)) {
#print(rownames(ratings)[i])
if(rownames(ratings)[i] %in% rownames(cosine_similarity_matrix) ){
temp <- cosine_similarity_matrix[row.names(ratings)[i],]
nearest_neighbours <- head(sort(temp, decreasing=TRUE, 10))
}
}
neirest neighbours
neirest_neighbours
nearest_neighbours
rm(nearest_neighbours)
# computing k-NN for K = 20
#crate matrix to hold 20 nearest neighbours for each user if have them
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings), ncol=10)
for(i in 1:nrow(ratings)) {
#print(rownames(ratings)[i])
if(rownames(ratings)[i] %in% rownames(cosine_similarity_matrix) ){
temp <- cosine_similarity_matrix[row.names(ratings)[i],]
nearest_neighbours <- head(sort(temp, decreasing=TRUE, 10))
}
}
rownames(cosine_similarity_matrix)
# computing k-NN for K = 20
#crate matrix to hold 20 nearest neighbours for each user if have them
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings), ncol=10)
for(i in 1:nrow(ratings)) {
#print(rownames(ratings)[i])
if(rownames(ratings)[i] %in% rownames(cosine_similarity_matrix) ){
temp <- cosine_similarity_matrix[row.names(ratings)[i],]
nearest_neighbours[i,] <- head(sort(temp, decreasing=TRUE, 10))
}
}
# computing k-NN for K = 20
#crate matrix to hold 20 nearest neighbours for each user if have them
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings), ncol=10)
for(i in 1:nrow(ratings)) {
#print(rownames(ratings)[i])
if(rownames(ratings)[i] %in% rownames(cosine_similarity_matrix) ){
temp <- cosine_similarity_matrix[row.names(ratings)[i],]
nearest_neighbours[i,] <- head(sort(temp, decreasing=TRUE), 10)
}
}
head(nearest_neighbours)
dim(neares_neighbours)
dim(nearest_neighbours)
nearest_neighbours
good <- !is.na(nearest_neighbours)
neairest_neighbours[good]
nearest_neighbours[good]
rownames(cosine_similrity_matrix)
rownames(cosine_similarity_matrix)
nearest_neighbours["zinzan"]
# computing k-NN for K = 20
#crate matrix to hold 20 nearest neighbours for each user if have them
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings), ncol=10)
for(i in 1:nrow(ratings)) {
#print(rownames(ratings)[i])
if(rownames(ratings)[i] %in% rownames(cosine_similarity_matrix) ){
temp <- cosine_similarity_matrix[row.names(ratings)[i],]
print(temp)
nearest_neighbours[i,] <- head(sort(temp, decreasing=TRUE), 10)
}
}
# computing k-NN for K = 20
#crate matrix to hold 20 nearest neighbours for each user if have them
nearest_neighbours <- matrix(data=NA, nrow=nrow(ratings), ncol=5)
for(i in 1:nrow(ratings)) {
#print(rownames(ratings)[i])
if(rownames(ratings)[i] %in% rownames(cosine_similarity_matrix) ){
temp <- cosine_similarity_matrix[row.names(ratings)[i],]
print(temp)
nearest_neighbours[i,] <- head(sort(temp, decreasing=TRUE), 5)
}
}
nearest_neighbours
good <- !is.na(nearest_neighbours)
neirest_neighbours[good]
nerest_neighbours[good]
nearest_neighbours[good]
View(ratings_matrix)
View(user_names)
